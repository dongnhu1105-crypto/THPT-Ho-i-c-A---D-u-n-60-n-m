/* prediction.js
   Ho·∫°t ƒë·ªông:
   - ch·ª©a 60 d·ª± ƒëo√°n
   - d√πng localStorage ƒë·ªÉ l∆∞u k·∫øt qu·∫£ cho m·ªói ng∆∞·ªùi (ch·ªâ hi·ªÉn th·ªã v·ªõi h·ªç)
   - c√≥ animation ƒë·ªÉ t·ªù k·∫øt qu·∫£ "m·ªü"
   - x·ª≠ l√Ω keyboard/ARIA c∆° b·∫£n
*/

document.addEventListener("DOMContentLoaded", () => {
  // --- Elements ---
  const drawBtn = document.getElementById("pw-draw");
  const resetBtn = document.getElementById("pw-reset");
  const resultBox = document.getElementById("pw-result");
  const predictionText = document.getElementById("pw-text");
  const predictionMeta = document.getElementById("pw-meta");
  const paper = document.getElementById("pw-paper");

  // --- LocalStorage key (ƒë·∫∑t t√™n ri√™ng ƒë·ªÉ tr√°nh tr√πng) ---
  const STORAGE_KEY = "pw_user_prediction_v1";

  // --- 60 d·ª± ƒëo√°n (d·ªÖ ch·ªânh / m·ªü r·ªông) ---
  const predictions = [
    "B·∫°n s·∫Ω ƒë∆∞·ª£c gi√°o vi√™n khen v√¨ l√†m b√†i t·ªët!",
    "M·ªôt ti·∫øt h·ªçc c·ª±c k·ª≥ vui ƒëang ch·ªù b·∫°n!",
    "Coi ch·ª´ng c√≥ ki·ªÉm tra mi·ªáng b·∫•t ng·ªù üòÜ",
    "B·∫°n s·∫Ω ng·ªìi c·∫°nh ng∆∞·ªùi b·∫°n th√¢n nh·∫•t!",
    "Ti·∫øt h·ªçc To√°n h√¥m nay tr√¥i qua r·∫•t nhanh!",
    "B·∫°n s·∫Ω ph√°t hi·ªán ra ƒëi·ªÅu th√∫ v·ªã trong gi·ªù Sinh h·ªçc.",
    "C√¥ gi√°o h√¥m nay t√¢m tr·∫°ng t·ªët l·∫Øm ƒë√≥ üòä",
    "H√¥m nay b·∫°n s·∫Ω ƒë∆∞·ª£c ƒëi·ªÉm 10!",
    "B·∫°n qu√™n ƒë·ªì d√πng h·ªçc t·∫≠p, nh∆∞ng may v·∫´n m∆∞·ª£n ƒë∆∞·ª£c üòÖ",
    "Ai ƒë√≥ s·∫Ω m∆∞·ª£n b·∫°n c√¢y b√∫t trong ti·∫øt sau ‚úèÔ∏è",
    "B·∫°n s·∫Ω l√† ng∆∞·ªùi ƒë·∫ßu ti√™n gi∆° tay ph√°t bi·ªÉu!",
    "H√¥m nay th·∫ßy c√¥ s·∫Ω k·ªÉ chuy·ªán vui trong l·ªõp.",
    "Ti·∫øt h·ªçc h√¥m nay d√†i‚Ä¶ nh∆∞ng c·ª±c k·ª≥ th√∫ v·ªã!",
    "B·∫°n s·∫Ω h·ªçc nh√≥m r·∫•t hi·ªáu qu·∫£.",
    "B·∫°n s·∫Ω c∆∞·ªùi r·∫•t nhi·ªÅu trong gi·ªù h·ªçc h√¥m nay.",
    "M·ªôt ti·∫øt h·ªçc nh·∫π nh√†ng, kh√¥ng √°p l·ª±c!",
    "B·∫°n s·∫Ω b·∫•t ng·ªù v·ªõi m·ªôt c√¢u h·ªèi d·ªÖ kh√¥ng ng·ªù ü§î",
    "Th·∫ßy c√¥ khen b·∫°n v√¨ n·ªó l·ª±c chƒÉm ch·ªâ.",
    "C·∫©n th·∫≠n, h√¥m nay d·ªÖ bu·ªìn ng·ªß trong ti·∫øt VƒÉn üò¥",
    "C√≥ th·ªÉ b·∫°n s·∫Ω ƒë∆∞·ª£c ph√¢n c√¥ng l√†m nh√≥m tr∆∞·ªüng!",
    "H√¥m nay b·∫°n h·ªçc nhanh h∆°n m·ªçi khi!",
    "B·∫°n s·∫Ω gi√∫p m·ªôt b·∫°n kh√°c hi·ªÉu b√†i.",
    "M·ªôt ti·∫øt h·ªçc ƒë·∫ßy nƒÉng l∆∞·ª£ng v√† ti·∫øng c∆∞·ªùi!",
    "B·∫°n s·∫Ω l√†m ƒë∆∞·ª£c b√†i t·∫≠p kh√≥ m√† tr∆∞·ªõc ƒë√¢y b·∫°n s·ª£.",
    "B·∫°n s·∫Ω qu√™n v·ªü ·ªü nh√†... nh∆∞ng kh√¥ng sao üòÖ",
    "Ai ƒë√≥ s·∫Ω nh·ªù b·∫°n ch·ªâ b√†i!",
    "Th·∫ßy c√¥ b·∫•t ng·ªù ƒë·ªïi ch·ªó ng·ªìi h√¥m nay!",
    "B·∫°n s·∫Ω h·ªçc ƒë∆∞·ª£c ƒëi·ªÅu m·ªõi c·ª±c k·ª≥ hay!",
    "Ti·∫øt h·ªçc H√≥a h√¥m nay s·∫Ω c√≥ th√≠ nghi·ªám th√∫ v·ªã üî¨",
    "B·∫°n s·∫Ω g·∫∑p may trong ti·∫øt th·ªÉ d·ª•c!",
    "B·∫°n s·∫Ω ƒë∆∞·ª£c g·ªçi l√™n b·∫£ng (v√† l√†m ƒë√∫ng h·∫øt üëè)",
    "H√¥m nay l√† ng√†y h·ªçc d·ªÖ ch·ªãu nh·∫•t tu·∫ßn.",
    "C√≥ ƒëi·ªÅu g√¨ ƒë√≥ b·∫•t ng·ªù ƒëang ch·ªù b·∫°n!",
    "B·∫°n s·∫Ω ho√†n th√†nh b√†i t·∫≠p nhanh h∆°n m·ªçi ng∆∞·ªùi.",
    "B·∫°n s·∫Ω l√† ng∆∞·ªùi duy nh·∫•t nh·ªõ b√†i c≈© üòé",
    "Th·∫ßy c√¥ s·∫Ω h·ªèi b·∫°n m·ªôt c√¢u r·∫•t d·ªÖ.",
    "M·ªôt bu·ªïi h·ªçc v·ªõi nhi·ªÅu n·ª• c∆∞·ªùi üòä",
    "B·∫°n s·∫Ω ƒë∆∞·ª£c b·∫°n c√πng b√†n cho k·∫πo üç¨",
    "B·∫°n s·∫Ω c√≥ b√†i ki·ªÉm tra b·∫•t ng·ªù, nh∆∞ng l√†m t·ªët!",
    "C·∫©n th·∫≠n, c√≥ th·ªÉ b·ªã g·ªçi ƒë·ªçc b√†i c≈© nha!",
    "B·∫°n s·∫Ω ƒë∆∞·ª£c c√¥ khen v√¨ gi·ªØ tr·∫≠t t·ª± t·ªët.",
    "B·∫°n s·∫Ω tham gia tr√≤ ch∆°i trong l·ªõp!",
    "H√¥m nay b·∫°n mang ƒë·∫ßy nƒÉng l∆∞·ª£ng t√≠ch c·ª±c!",
    "B·∫°n s·∫Ω ƒë∆∞·ª£c ph√¢n c√¥ng nhi·ªám v·ª• m·ªõi.",
    "M·ªôt ng∆∞·ªùi b·∫°n s·∫Ω gi√∫p b·∫°n ho√†n th√†nh b√†i t·∫≠p.",
    "H√¥m nay b·∫°n s·∫Ω hi·ªÉu b√†i ngay t·ª´ l·∫ßn ƒë·∫ßu ti√™n!",
    "B·∫°n s·∫Ω th·∫•y m·ªôt c√¢u n√≥i c·ªßa c√¥ c·ª±c truy·ªÅn c·∫£m h·ª©ng.",
    "H√¥m nay l√† ng√†y ƒë·∫ßy ni·ªÅm vui h·ªçc t·∫≠p!",
    "C√≥ th·ªÉ b·∫°n s·∫Ω ng·ªìi c·∫°nh m·ªôt ng∆∞·ªùi b·∫°n m·ªõi.",
    "M·ªôt ti·∫øt h·ªçc kh√¥ng ng·ªù l·∫°i vui ƒë·∫øn v·∫≠y!",
    "B·∫°n s·∫Ω ƒë∆∞·ª£c ƒëi·ªÉm th∆∞·ªüng trong l·ªõp!",
    "Th·∫ßy c√¥ s·∫Ω c∆∞·ªùi v√¨ c√¢u tr·∫£ l·ªùi d·ªÖ th∆∞∆°ng c·ªßa b·∫°n üòÇ",
    "B·∫°n s·∫Ω gi√∫p l·ªõp ƒë·∫°t th√†nh t√≠ch nh·ªè n√†o ƒë√≥!",
    "B·∫°n s·∫Ω kh√°m ph√° ƒëi·ªÅu th√∫ v·ªã trong b√†i h·ªçc h√¥m nay.",
    "M·ªôt ti·∫øt h·ªçc th·∫≠t nh·∫π nh√†ng v√† √Ω nghƒ©a.",
    "B·∫°n s·∫Ω l√†m ai ƒë√≥ m·ªâm c∆∞·ªùi h√¥m nay üòä",
    "H√¥m nay b·∫°n th·∫≠t may m·∫Øn trong h·ªçc t·∫≠p!",
    "M·ªôt b√†i h·ªçc khi·∫øn b·∫°n mu·ªën t√¨m hi·ªÉu th√™m n·ªØa!",
    "B·∫°n s·∫Ω c√≥ kho·∫£nh kh·∫Øc ƒë√°ng nh·ªõ trong l·ªõp h·ªçc.",
    "B·∫°n s·∫Ω v·ªÅ nh√† v·ªõi t√¢m tr·∫°ng th·∫≠t vui!",
  ];

  // --- Helpers ---
  function getStoredPrediction() {
    try {
      return localStorage.getItem(STORAGE_KEY);
    } catch (e) {
      // N·∫øu localStorage b·ªã ch·∫∑n (private mode), an to√†n b·ªè qua
      console.warn("LocalStorage kh√¥ng kh·∫£ d·ª•ng:", e);
      return null;
    }
  }

  function setStoredPrediction(text) {
    try {
      localStorage.setItem(STORAGE_KEY, text);
    } catch (e) {
      console.warn("L∆∞u d·ª± ƒëo√°n th·∫•t b·∫°i:", e);
    }
  }

  function clearStoredPrediction() {
    try {
      localStorage.removeItem(STORAGE_KEY);
    } catch (e) {
      console.warn("X√≥a d·ª± ƒëo√°n th·∫•t b·∫°i:", e);
    }
  }

  function formatTimestamp(date) {
    // Tr·∫£ v·ªÅ chu·ªói ng·∫Øn g·ªçn, v√≠ d·ª•: 13:45 12/10
    const hh = String(date.getHours()).padStart(2, "0");
    const mm = String(date.getMinutes()).padStart(2, "0");
    const dd = String(date.getDate()).padStart(2, "0");
    const mmth = String(date.getMonth() + 1).padStart(2, "0");
    return `${hh}:${mm} ${dd}/${mmth}`;
  }

  function showResult(text, timestampStr) {
    predictionText.textContent = text;
    predictionMeta.textContent = `K·∫øt qu·∫£ l√∫c ${timestampStr}`;
    resultBox.hidden = false;
    resetBtn.hidden = false;
    drawBtn.hidden = true;

    // set focus v√†o result ƒë·ªÉ ƒë·ªçc ARIA
    paper.focus?.();
  }

  function hideResult() {
    resultBox.hidden = true;
    resetBtn.hidden = true;
    drawBtn.hidden = false;
  }

  // --- Init: n·∫øu ƒë√£ c√≥ k·∫øt qu·∫£ l∆∞u, hi·ªÉn th·ªã ---
  const stored = getStoredPrediction();
  if (stored) {
    // stored c√≥ d·∫°ng JSON ch·ª©a { text, time }
    try {
      const parsed = JSON.parse(stored);
      if (parsed && parsed.text) {
        showResult(parsed.text, parsed.time || "");
      } else {
        // n·∫øu d·ªØ li·ªáu c≈© d·∫°ng string, d√πng nguy√™n
        showResult(stored, formatTimestamp(new Date()));
      }
    } catch (e) {
      // kh√¥ng ph·∫£i JSON ‚Üí hi·ªÉn th·ªã nguy√™n
      showResult(stored, formatTimestamp(new Date()));
    }
  }

  // --- Draw event ---
  drawBtn.addEventListener("click", () => {
    // pick random
    const idx = Math.floor(Math.random() * predictions.length);
    const picked = predictions[idx];

    const ts = formatTimestamp(new Date());
    // store as JSON (text + time)
    setStoredPrediction(JSON.stringify({ text: picked, time: ts }));

    // show with animation
    showResult(picked, ts);

    // add tiny confetti dots effect (CSS-free simple)
    tinyConfettiBurst();
  });

  // --- Reset event (b·ªëc l·∫°i) ---
  resetBtn.addEventListener("click", () => {
    const ok = confirm(
      "B·∫°n c√≥ ch·∫Øc mu·ªën b·ªëc l·∫°i? K·∫øt qu·∫£ hi·ªán t·∫°i s·∫Ω b·ªã x√≥a cho thi·∫øt b·ªã n√†y."
    );
    if (!ok) return;
    clearStoredPrediction();
    hideResult();
  });

  // --- Keyboard accessibility: Enter on draw button ---
  drawBtn.addEventListener("keydown", (e) => {
    if (e.key === "Enter" || e.key === " ") {
      e.preventDefault();
      drawBtn.click();
    }
  });

  // --- Small visual confetti using DOM (temporary, lightweight) ---
  function tinyConfettiBurst() {
    // t·∫°o v√†i ch·∫•m m√†u r∆°i xu·ªëng trong v√πng k·∫øt qu·∫£
    const burstCount = 18;
    const colors = ["#FFD93D", "#FF6B6B", "#6BCB77", "#4D96FF", "#C77DFF"];
    const container = document.createElement("div");
    container.style.position = "absolute";
    container.style.left = 0;
    container.style.top = 0;
    container.style.width = "100%";
    container.style.height = "100%";
    container.style.pointerEvents = "none";
    container.style.overflow = "visible";

    // g·∫Øn v√†o pw-card
    const card = document.querySelector(".pw-card");
    card.style.position = "relative";
    card.appendChild(container);

    for (let i = 0; i < burstCount; i++) {
      const dot = document.createElement("div");
      const size = Math.random() * 8 + 6;
      dot.style.width = `${size}px`;
      dot.style.height = `${size}px`;
      dot.style.borderRadius = "50%";
      dot.style.background = colors[Math.floor(Math.random() * colors.length)];
      dot.style.position = "absolute";
      dot.style.left = `${50 + (Math.random() * 160 - 80)}%`;
      dot.style.top = `${30 + (Math.random() * 20 - 10)}%`;
      dot.style.opacity = "0.95";
      dot.style.transform = `translate(-50%, -50%)`;
      dot.style.transition =
        "transform 800ms cubic-bezier(.2,.8,.2,1), opacity 900ms ease";
      container.appendChild(dot);

      // animate outwards and down
      setTimeout(() => {
        const dx = Math.random() * 160 - 80;
        const dy = 120 + Math.random() * 80;
        dot.style.transform = `translate(${dx}px, ${dy}px)`;
        dot.style.opacity = "0";
      }, 30 + i * 25);

      // remove after animation
      setTimeout(() => dot.remove(), 1200);
    }

    // cleanup container
    setTimeout(() => {
      container.remove();
    }, 1400);
  }
});

function time

info StyleSheetList
GamepadEvent HTMLUnknownElement
ElementInternalsasda

